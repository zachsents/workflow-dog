x-std-healthcheck: &std_healthcheck
  interval: 20s
  timeout: 3s
  retries: 3
  start_period: 10s
  start_interval: 1s

services:
  proxy:
    container_name: proxy
    image: registry.digitalocean.com/workflow-dog/proxy
    build:
      target: proxy
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    healthcheck:
      <<: *std_healthcheck
      test: curl -f http://localhost/__proxy_health || exit 1
    # depends_on:
    #   api:
    #     condition: service_healthy
    environment:
      - APP_ORIGIN
      - API_PORT
      - CADDY_SECONDARY_ADDRESSES

  db:
    container_name: db
    image: registry.digitalocean.com/workflow-dog/db
    build:
      target: db
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: unless-stopped
    healthcheck:
      <<: *std_healthcheck
      test: pg_isready -U postgres -h localhost
    environment:
      # PGx vs. POSTGRES_x - PGx is for the container, POSTGRES_x is for the actual pg service
      - POSTGRES_PORT
      - PGPORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data

  marketing-site:
    container_name: marketing-site
    image: registry.digitalocean.com/workflow-dog/marketing-site
    build:
      target: marketing-site-prod
    restart: unless-stopped

  webapp:
    container_name: webapp
    image: registry.digitalocean.com/workflow-dog/web
    build:
      target: web-prod
    restart: unless-stopped

  api:
    container_name: api
    image: registry.digitalocean.com/workflow-dog/api
    build:
      target: api
    restart: unless-stopped
    healthcheck:
      <<: *std_healthcheck
      test: bun -e 'await fetch("http://localhost:${API_PORT}/api/health").then(r => !r.ok && Promise.reject(r.statusText))' || exit 1
    environment:
      - PORT=${API_PORT}
      - ENVIRONMENT
      - APP_ORIGIN
      - APP_NAME
      - DATABASE_URL
      - SERVICE_ACCOUNT_ENCRYPTION_KEY
      - SUPERTOKENS_CORE_URL
      - SUPERTOKENS_API_KEY
      - AUTH_GOOGLE_CLIENT_ID
      - AUTH_GOOGLE_CLIENT_SECRET
      - RESEND_KEY
      - RESEND_GENERAL_AUDIENCE_ID
      - REDIS_PORT
      - REDIS_PASSWORD
      - STRIPE_KEY
      - STRIPE_WEBHOOK_SIGNING_SECRET
      - TP_GOOGLE_CLIENT_ID
      - TP_GOOGLE_CLIENT_SECRET

  supertokens:
    container_name: supertokens
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.0.2
    restart: unless-stopped
    healthcheck:
      <<: *std_healthcheck
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/${SUPERTOKENS_PORT} && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
    environment:
      - POSTGRESQL_CONNECTION_URI=${DATABASE_URL}
      - API_KEYS=${SUPERTOKENS_API_KEY}
      - SUPERTOKENS_PORT
      - POSTGRESQL_TABLE_SCHEMA=auth

  redis:
    container_name: redis
    image: bitnami/redis:7.4.1
    restart: unless-stopped
    volumes:
      - redis-data:/bitnami/redis/data
    healthcheck:
      <<: *std_healthcheck
      test: redis-cli ping -u redis://default:${REDIS_PASSWORD}@localhost:${REDIS_PORT}/0
    environment:
      - REDIS_PORT_NUMBER=${REDIS_PORT}
      - REDIS_MASTER_PORT_NUMBER=${REDIS_PORT}
      - REDIS_PASSWORD
      - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}

volumes:
  db-data:
  redis-data:
